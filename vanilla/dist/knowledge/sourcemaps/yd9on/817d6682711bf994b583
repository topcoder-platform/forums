{"version":3,"sources":["webpack://vanilla-knowledge/./library/src/scripts/redux/ReduxActions.ts","webpack://vanilla-knowledge/./library/src/scripts/redux/getStore.ts","webpack://vanilla-knowledge/./library/src/scripts/@types/api/core.ts","webpack://vanilla-knowledge/./library/src/scripts/utility/fileUtils.tsx","webpack://vanilla-knowledge/./library/src/scripts/apiv2.ts","webpack://vanilla-knowledge/./library/src/scripts/gdn.ts","webpack://vanilla-knowledge/./library/src/scripts/theming/ThemeActions.ts","webpack://vanilla-knowledge/./library/src/scripts/locales/localeActions.ts","webpack://vanilla-knowledge/./library/src/scripts/theming/themeReducer.ts","webpack://vanilla-knowledge/./library/src/scripts/features/users/suggestion/SuggestionTrie.ts","webpack://vanilla-knowledge/./library/src/scripts/features/users/suggestion/UserSuggestionActions.ts","webpack://vanilla-knowledge/./library/src/scripts/features/users/suggestion/UserSuggestionModel.ts","webpack://vanilla-knowledge/./library/src/scripts/features/users/UserActions.ts","webpack://vanilla-knowledge/./library/src/scripts/features/notifications/NotificationsActions.ts","webpack://vanilla-knowledge/./library/src/scripts/features/users/userModel.ts","webpack://vanilla-knowledge/./library/src/scripts/locales/localeReducer.ts","webpack://vanilla-knowledge/./library/src/scripts/redux/reducerRegistry.ts","webpack://vanilla-knowledge/./library/src/scripts/utility/appUtils.tsx"],"names":["ReduxActions","dispatch","api","getState","actionCreator","args","apply","this","type","payload","undefined","requestType","responseType","errorType","dummyResponseType","dummyMetaType","request","meta","createApiRequestAction","response","createApiResponseAction","error","createApiErrorAction","logError","endpoint","actionCreators","params","requestPromise","get","c","bindThunkAction","asyncWorker","extra","a","started","result","done","failed","store","initialState","initialActions","window","__ACTIONS__","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionSanitizer","action","includes","quill","compose","applyMiddleware","getStore","reducer","combineReducers","getReducers","createStore","forEach","LoadStatus","PublishStatus","FileSizeUnit","apiv2","axios","create","baseURL","siteUrl","headers","common","transformResponse","defaults","responseData","status","errors","length","indexArrayByKey","paramsSerializer","qs","stringify","gdn","permissions","translations","createAction","actionCreatorFactory","ThemeActions","themeKey","theme","assets","data","apiThunk","getAssets","async","getAllLocalesACs","fetchLocalesFromApi","force","localeLoadable","locales","SUCCESS","Promise","resolve","INITIAL_STATE","PENDING","themeReducer","produce","reducerWithInitialState","case","state","LOADING","ERROR","SuggestionTrie","word","value","current","root","i","letter","children","contents","node","char","charAt","getNode","x","Math","min","MAX_PARTIAL_LOOKUP_ITERATIONS","substring","potentialValue","getValue","UserSuggestionActions","bindDispatch","setActiveAC","username","trie","UserSuggestionModel","selectSuggestionsTrie","exactLookup","loadUsersACs","partialLookup","getValueFromPartialsOfWord","USER_LIMIT","filterSuggestions","name","order","limit","then","Error","map","domID","userID","catch","debounce","interalLoadUsers","suggestionID","suggestionIndex","SET_ACTIVE_SUGGESTION","users","searchName","searchCollator","Intl","Collator","usage","sensitivity","ignorePunctuation","numeric","filter","userSuggestion","suggestionIDPartial","compare","generateApiActionCreators","LOAD_USERS_REQUEST","LOAD_USERS_RESPONSE","LOAD_USERS_ERROR","lastSuccessfulUsername","currentUsername","activeSuggestionID","activeSuggestionIndex","insert","shouldKeepPreviousResults","previousSuccessfulName","newNameSubstring","sortSuggestions","firstUserID","stateSlice","rest","suggestions","defaultSuggestions","currentNode","isLoading","currentMoment","moment","looseCollator","ACTIVE_THRESHOLD","recentlyActive","lessActive","daysAgo90","subtract","user","dateLastActive","lastActiveMoment","isSameOrAfter","push","sortByName","userA","userB","casedSearchName","toLocaleLowerCase","aCasedName","bCasedName","startsWith","exactToTheTop","sort","allUsers","COUNT_CACHE_PERIOD","UserActions","getMeACs","currentTime","Date","getTime","lastRequested","countInformation","getCountsACs","NotificationsActions","id","dispatchApi","getNotificationACs","getNotificationsACs","markReadACs","read","markAllReadACs","GET_NOTIFICATION_REQUEST","GET_NOTIFICATION_RESPONSE","GET_NOTIFICATION_ERROR","GET_NOTIFICATIONS_REQUEST","GET_NOTIFICATIONS_RESPONSE","GET_NOTIFICATIONS_ERROR","MARK_READ_REQUEST","MARK_READ_RESPONSE","MARK_READ_ERROR","MARK_ALL_READ_REQUEST","MARK_ALL_READ_RESPONSE","MARK_ALL_READ_ERROR","suggestionReducer","counts","usersReducer","default","countUnreadNotifications","DEFAULT_LOCALE_STATE","localeReducer","nextState","dynamicReducers","registerReducer","replaceReducer","getMeta","key","defaultValue","parts","split","haystack","part","hasOwnProperty","path","indexOf","location","origin","assetUrl","themeAsset","_readyHandlers","_executeReady","handlerPromises","handler","exec","all","document","readyState","addEventListener","onContent","callback"],"mappings":"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","file":"shared.min.js?817d6682711bf994b583","sourcesContent":["/**\n * @author Adam (charrondev) Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { IApiError, IApiResponse } from \"@library/@types/api/core\";\nimport { AxiosResponse, AxiosInstance } from \"axios\";\nimport { logError } from \"@vanilla/utils\";\nimport { ThunkDispatch, ThunkAction } from \"redux-thunk\";\nimport { AnyAction } from \"redux\";\nimport { AsyncActionCreators } from \"typescript-fsa\";\nimport { ICoreStoreState } from \"@library/redux/reducerRegistry\";\n\n/**\n * Base class for creating redux actions.\n */\nexport default class ReduxActions<S extends ICoreStoreState = ICoreStoreState> {\n    /**\n     * Utility to create an action with our a without a payload of a given type.\n     * The action generated can have its type narrowed in a reducer switch statement if the type T matches.\n     *\n     * @see ActionsUnion\n     *\n     * @param type The action type.\n     * @param payload The payload data.\n     */\n    public static createAction<ActionType extends string>(type: ActionType): IAction<ActionType>;\n    public static createAction<ActionType extends string, Payload>(\n        type: ActionType,\n        payload: Payload,\n    ): IActionWithPayload<ActionType, Payload>;\n    public static createAction<ActionType extends string, Payload>(type: ActionType, payload?: Payload) {\n        return payload === undefined ? { type } : { type, payload };\n    }\n\n    /**\n     * Create request, response, and error action creators.\n     *\n     * The dummy types are needed because typescript currently requires all generic types to be specified or all to be inferred. They cannot currently be mixed.\n     *\n     * @see https://github.com/Microsoft/TypeScript/issues/10571#issuecomment-345402872\n     *\n     * @param requestType The string for the request type. This should be a unique constant.\n     * @param responseType The string for the response type. This should be a unique constant.\n     * @param errorType The string for the error type. This should be a unique constant.\n     * @param dummyResponseType A placeholder to infer the type of the response. This isn't used for anything other than inferring a type.\n     * @param dummyMetaType A placeholder to infer the type of the meta. This isn't used for anything other than inferringa  type.\n     *\n     * @example\n     *\n     * ```\n     * const GET_THING_REQUEST = \"GET_THING_REQUEST\";\n     * const GET_THING_RESPONSE = \"GET_THING_RESPONSE\";\n     * const GET_THING_ERROR = \"GET_THING_ERROR\";\n     * interface IThing { thing: string }\n     * interface IThingOptions { page?: number }\n     *\n     * generateApiActionCreators(GET_THING_REQUEST, GET_THING_RESPONSE, GET_THING_ERROR, {} as IThing, {} as IThingOptions);\n     * ```\n     */\n    public static generateApiActionCreators<\n        RequestActionType extends string,\n        ResponseActionType extends string,\n        ErrorActionType extends string,\n        ResponseDataType,\n        Meta = any\n    >(\n        requestType: RequestActionType,\n        responseType: ResponseActionType,\n        errorType: ErrorActionType,\n        dummyResponseType?: ResponseDataType,\n        dummyMetaType?: Meta,\n    ): {\n        request: (meta?: Meta) => IApiAction<RequestActionType, Meta>;\n        response: (\n            payload: IApiResponse<ResponseDataType>,\n            meta?: Meta,\n        ) => IApiResponseAction<ResponseActionType, Meta, ResponseDataType>;\n        error: (error: IApiError, meta?: Meta) => IApiErrorAction<ErrorActionType, Meta>;\n    } {\n        return {\n            request: (meta: Meta) => ReduxActions.createApiRequestAction(requestType, meta),\n            response: (response: IApiResponse<ResponseDataType>, meta: Meta) =>\n                ReduxActions.createApiResponseAction(responseType, meta, response),\n            error: (error: IApiError, meta: Meta) => ReduxActions.createApiErrorAction(errorType, meta, error),\n        };\n    }\n\n    /**\n     * Create an API request action. For use in createApiActions().\n     *\n     * @param type The action's type.\n     * @param meta The type of the meta for the action.\n     */\n    private static createApiRequestAction<ActionType extends string, Meta>(\n        type: ActionType,\n        meta: Meta,\n    ): IApiAction<ActionType, Meta> {\n        return {\n            type,\n            meta,\n        };\n    }\n\n    /**\n     * Create an API error action. For use in createApiActions().\n     *\n     * @param type The action's type.\n     * @param meta The type of the meta for the action.\n     * @param error An API error.\n     */\n    private static createApiErrorAction<ActionType extends string, Meta>(\n        type: ActionType,\n        meta: Meta,\n        error: IApiError,\n    ): IApiErrorAction<ActionType, Meta> {\n        logError(error);\n        return {\n            type,\n            meta,\n            payload: error,\n        };\n    }\n\n    /**\n     * Create an API response action. For use in createApiActions().\n     *\n     * @param type The action's type.\n     * @param meta The type of the meta for the action.\n     * @param payload The shape of the IApiResponse data.\n     */\n    private static createApiResponseAction<ActionType extends string, Meta, ResponseDataType>(\n        type: ActionType,\n        meta: Meta,\n        payload: IApiResponse<ResponseDataType>,\n    ): IApiResponseAction<ActionType, Meta, ResponseDataType> {\n        return {\n            type,\n            meta,\n            payload,\n        };\n    }\n\n    /**\n     * Constructor for the redux actions.\n     *\n     * @param dispatch A redux dispatch function.\n     * @param api An API instance.\n     * @param getState Optionally override the getState method. (generally for testin purposes.)\n     */\n    constructor(protected dispatch: any, protected api: AxiosInstance, getState?: () => any) {\n        if (getState) {\n            this.getState = getState;\n        }\n    }\n\n    /**\n     * Bind dispatch to an action creator.\n     */\n    protected bindDispatch = <T extends (...args) => void>(actionCreator: T): T => {\n        return ((...args) => {\n            return this.dispatch(actionCreator.apply(this, args));\n        }) as any;\n    };\n\n    /**\n     * Generate a simple redux thunk for an API request using action creators.\n     *\n     * @param requestType The request method. Eg. post, patch, get, put.\n     * @param endpoint The endpoint requested.\n     * @param actionCreators Action creators generated from {@link ReduxActions.generateApiActionCreators()}\n     * @param params A parameter object for the request. This will be serialized as a JSON body or query string.\n     * @param meta\n     */\n    protected async dispatchApi<T>(\n        requestType: RequestType,\n        endpoint: string,\n        actionCreators: ReturnType<typeof ReduxActions.generateApiActionCreators>,\n        params: any,\n        meta: any = {},\n    ): Promise<AxiosResponse<T> | undefined> {\n        meta = {\n            ...params,\n            ...meta,\n        };\n        this.dispatch(actionCreators.request(meta));\n        try {\n            const requestPromise =\n                requestType === \"get\"\n                    ? this.api.get(endpoint, { params })\n                    : this.api[requestType as any](endpoint, params);\n            const response: AxiosResponse<T> = await requestPromise;\n            this.dispatch(actionCreators.response(response, meta));\n            return response;\n        } catch (apiError) {\n            this.dispatch(actionCreators.error(apiError, meta));\n        }\n    }\n\n    protected getState(): S {\n        return this.dispatch((c, getState) => {\n            return getState();\n        });\n    }\n}\n\n// Redux FSA\n\n/**\n * It's either a promise, or it isn't\n */\ntype MaybePromise<Type> = Type | Promise<Type>;\n\n/**\n * A redux-thunk with the params as the first argument.  You don't have to\n * return a promise; but, the result of the dispatch will be one.\n */\ntype AsyncWorker<Params, Succ, State, Extra = any> = (\n    params: Params,\n    dispatch: ThunkDispatch<State, Extra, AnyAction>,\n    getState: () => State,\n    extra: Extra,\n) => MaybePromise<Succ>;\n\n/** A function that takes parameters and returns a redux-thunk */\ntype ThunkActionCreator<Params, Result, State, Extra> = (\n    params?: Params,\n) => ThunkAction<Result, State, Extra, AnyAction>;\n\n/**\n * Bind a redux-thunk to typescript-fsa async action creators\n * @param actionCreators The typescript-fsa async action creators\n * @param asyncWorker A redux-thunk with extra `params` as the first argument\n * @returns a ThunkActionCreator, the result of which you can pass to dispatch()\n */\nexport const bindThunkAction = <Params, Succ, Err, State, Extra = any>(\n    actionCreators: AsyncActionCreators<Params, Succ, Err>,\n    asyncWorker: AsyncWorker<Params, Succ, State, Extra>,\n): ThunkActionCreator<Params, Promise<Succ>, State, Extra> => (params: Params) => async (dispatch, getState, extra) => {\n    try {\n        dispatch(actionCreators.started(params!));\n        const result = await asyncWorker(params!, dispatch, getState, extra);\n        dispatch(actionCreators.done({ params: params!, result }));\n        return result;\n    } catch (error) {\n        dispatch(actionCreators.failed({ params: params!, error }));\n        throw error;\n    }\n};\n\n// Action interfaces\nexport interface IAction<T extends string> {\n    type: T;\n}\n\nexport interface IActionWithPayload<T extends string, P> extends IAction<T> {\n    payload: P;\n    meta?: any;\n}\n\nexport interface IActionCreator<T extends string> {\n    (): IAction<T>;\n}\n\ntype FunctionType = (...args: any[]) => any;\ninterface IActionCreatorsMapObject {\n    [actionCreator: string]: FunctionType;\n}\n\n// API Action interfaces\ninterface IApiAction<ActionType, Meta> {\n    type: ActionType;\n    meta: Meta;\n}\n\ninterface IApiErrorAction<ActionType, Meta> extends IApiAction<ActionType, Meta> {\n    payload: IApiError;\n}\n\ninterface IApiResponseAction<ActionType, Meta, ResponseDataType> extends IApiAction<ActionType, Meta> {\n    payload: IApiResponse<ResponseDataType>;\n}\n\ntype RequestType = \"get\" | \"post\" | \"put\" | \"delete\" | \"patch\";\n\n// Utility to pull a group of action types out of an actions object\nexport type ActionsUnion<A extends IActionCreatorsMapObject> = ReturnType<A[keyof A]>;\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { createStore, compose, applyMiddleware, combineReducers, Store, AnyAction } from \"redux\";\nimport { getReducers, ICoreStoreState } from \"@library/redux/reducerRegistry\";\nimport thunk from \"redux-thunk\";\n\n// There may be an initial state to import.\nconst initialState = {};\nconst initialActions = window.__ACTIONS__ || [];\n\nconst middleware = [thunk];\n\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nconst actionSanitizer = (action: AnyAction) =>\n    (action.type as string).includes(\"[editorInstance]\") && action.payload && action.payload.quill\n        ? {\n              ...action,\n              payload: { ...action.payload, quill: \"<<Quill Instance>>\" },\n          }\n        : action;\n// Browser may have redux dev tools installed, if so integrate with it.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ actionSanitizer })\n    : compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\n\n// Build the store, add devtools extension support if it's available.\nlet store;\n\nexport default function getStore<S = ICoreStoreState>(): Store<S, any> {\n    if (store === undefined) {\n        // Get our reducers.\n        const reducer = combineReducers(getReducers());\n        store = createStore(reducer, initialState, enhancer);\n\n        // Dispatch initial actions returned from the server.\n        initialActions.forEach(store.dispatch);\n    }\n\n    return store;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { Omit } from \"@library/@types/utils\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { IUserFragment } from \"@library/@types/api/users\";\n\nexport enum LoadStatus {\n    PENDING = \"PENDING\",\n    LOADING = \"LOADING\",\n    SUCCESS = \"SUCCESS\",\n    ERROR = \"ERROR\",\n}\n\nexport interface ILoadable<T, E = IApiError> {\n    status: LoadStatus;\n    error?: E;\n    data?: T;\n}\n\nexport interface IApiResponse<DataType = any> {\n    data: DataType;\n    status: number;\n    headers?: any;\n}\n\nexport interface IFieldError {\n    message: string; // translated message\n    code: string; // translation code\n    field: string;\n    status?: number; // HTTP status\n}\n\nexport interface IServerError {\n    message: string;\n    status: number;\n    errors?: {\n        [key: string]: IFieldError[];\n    };\n}\n\nexport interface IApiError extends AxiosError {\n    response: AxiosResponse<IServerError | null>;\n}\n\ninterface IMultiType<T> {\n    recordType: T;\n    recordID: number;\n}\n\nexport type MultiTypeRecord<T, Subtract extends keyof T, TypeName extends string> = Omit<T, Subtract> &\n    IMultiType<TypeName>;\n\nexport interface INavigationItem {\n    name: string;\n    url: string;\n    parentID: number;\n    recordID: number;\n    sort: number | null;\n    recordType: string;\n}\n\nexport interface IApiDateInfo {\n    insertUserID: number;\n    insertDate: string;\n    updateUserID: number;\n    updateDate: string;\n}\n\nexport interface IApiDateInfoExpanded extends IApiDateInfo {\n    insertUser: IUserFragment;\n    updateUser: IUserFragment;\n}\n\nexport interface INavigationTreeItem extends INavigationItem {\n    children: INavigationTreeItem[];\n}\n\nexport interface ILinkGroup {\n    category: INavigationItem;\n    items: INavigationItem[];\n}\n\nexport interface ILinkListData {\n    groups: ILinkGroup[];\n    ungroupedItems: INavigationItem[];\n}\n\nexport enum PublishStatus {\n    DELETED = \"deleted\",\n    UNDELETED = \"undeleted\",\n    PUBLISHED = \"published\",\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { t } from \"@library/utility/appUtils\";\n\ninterface IHumanFileSize {\n    amount: number;\n    unit: string;\n    unitAbbr: string;\n}\n\nenum FileSizeUnit {\n    B = \"B\",\n    KB = \"KB\",\n    MB = \"MB\",\n    GB = \"GB\",\n    TB = \"TB\",\n}\n\n/**\n * Parse a number of bytes into pieces of a human readable file size.\n *\n * @param size File size in bytes\n */\nexport function humanFileSize(size: number): IHumanFileSize {\n    const i: number = Math.floor(Math.log(size) / Math.log(1024));\n    const unitAbbr = Object.values(FileSizeUnit)[i];\n\n    const fullValue: number = size / Math.pow(1024, i);\n    // 2 digits\n    const value = Number.parseFloat(fullValue.toFixed(2));\n    const unit = getUnabbreviatedFileSizeUnit(unitAbbr);\n    return {\n        amount: value,\n        unit,\n        unitAbbr,\n    };\n}\n\n/**\n * Component for rendering the results of `humanFileSize`.\n */\nexport function HumanFileSize(props: { numBytes: number }) {\n    const humanSize = humanFileSize(props.numBytes);\n    return (\n        <>\n            {humanSize.amount}\n            <abbr title={humanSize.unit}>{` ${humanSize.unitAbbr}`}</abbr>\n        </>\n    );\n}\n\n/**\n * Convert from FileSizeUnit to the unabbreviated version.\n *\n * @param unit The unit to translate.\n */\nfunction getUnabbreviatedFileSizeUnit(unit: FileSizeUnit): string {\n    switch (unit) {\n        case FileSizeUnit.B:\n            return t(\"Byte\");\n        case FileSizeUnit.KB:\n            return t(\"Kilobyte\");\n        case FileSizeUnit.MB:\n            return t(\"Megabyte\");\n        case FileSizeUnit.GB:\n            return t(\"Gigabyte\");\n        case FileSizeUnit.TB:\n            return t(\"Terabyte\");\n    }\n}\n","/**\n * Entrypoint for the APIv2 calls. Prepulates an axios instance with some config settings.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { formatUrl, t, getMeta, siteUrl } from \"@library/utility/appUtils\";\nimport { indexArrayByKey } from \"@vanilla/utils\";\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\nimport qs from \"qs\";\nimport { sprintf } from \"sprintf-js\";\nimport { humanFileSize } from \"@library/utility/fileUtils\";\nimport { IApiError, IFieldError } from \"@library/@types/api/core\";\nimport { IUserFragment } from \"@library/@types/api/users\";\n\nfunction fieldErrorTransformer(responseData) {\n    if (responseData && responseData.status >= 400 && responseData.errors && responseData.errors.length > 0) {\n        responseData.errors = indexArrayByKey(responseData.errors, \"field\");\n    }\n\n    return responseData;\n}\n\nconst apiv2 = axios.create({\n    baseURL: siteUrl(\"/api/v2/\"),\n    headers: {\n        common: {\n            \"X-Requested-With\": \"vanilla\",\n        },\n    },\n    transformResponse: [...(axios.defaults.transformResponse as any), fieldErrorTransformer],\n    paramsSerializer: params => qs.stringify(params),\n});\n\nexport default apiv2;\n\nexport type ProgressHandler = (progressEvent: any) => void;\n\nexport function createTrackableRequest(\n    requestFunction: (progressHandler: ProgressHandler) => () => Promise<AxiosResponse>,\n) {\n    return (onUploadProgress: ProgressHandler) => {\n        return requestFunction(onUploadProgress);\n    };\n}\n/**\n * Upload an image using Vanilla's API v2.\n *\n * @param file - The file to upload.\n */\nexport async function uploadFile(file: File, requestConfig: AxiosRequestConfig = {}) {\n    let allowedExtensions = getMeta(\"upload.allowedExtensions\", []) as string[];\n    allowedExtensions = allowedExtensions.map((ext: string) => ext.toLowerCase());\n    const maxSize = getMeta(\"upload.maxSize\", 0);\n    const filePieces = file.name.split(\".\");\n    const extension = filePieces[filePieces.length - 1] || \"\";\n\n    if (file.size > maxSize) {\n        const humanSize = humanFileSize(maxSize);\n        const stringTotal: string = humanSize.amount + humanSize.unitAbbr;\n        const message = sprintf(t(\"The uploaded file was too big (max %s).\"), stringTotal);\n        throw new Error(message);\n    } else if (!allowedExtensions.includes(extension.toLowerCase())) {\n        const attachmentsString = allowedExtensions.join(\", \");\n        const message = sprintf(\n            t(\n                \"The uploaded file did not have an allowed extension. \\nOnly the following extensions are allowed. \\n%s.\",\n            ),\n            attachmentsString,\n        );\n        throw new Error(message);\n    }\n\n    const data = new FormData();\n    data.append(\"file\", file, file.name);\n    // Show Vanilla message instead of a default message\n    return apiv2.post(\"/media\", data, requestConfig)\n        .then(response => response.data)\n        .catch(error => {\n            if (error.response.data &&\n                error.response.data.message) {\n                throw new Error(error.response.data.message);\n            } else {\n                throw new Error(error.response.message)\n            }\n        });\n}\n\n/**\n * Extract a field specific error from an ILoadable if applicable.\n *\n * @param apiError - The error to extract from.\n * @param field - The field to extract.\n *\n * @returns an array of IFieldErrors if found or undefined.\n */\nexport function getFieldErrors(apiError: IApiError | undefined, field: string): IFieldError[] | undefined {\n    if (!apiError) {\n        return;\n    }\n\n    const serverError = apiError.response.data;\n    if (serverError && serverError.errors && serverError.errors[field]) {\n        return serverError.errors[field];\n    }\n}\n\n/**\n * Extract a global error message out of an ILoadable if applicable.\n *\n * @param apiError - The error to extract from.\n * @param validFields - Field to check for overriding fields errors from. A global error only shows if there are no valid field errors.\n *\n * @returns A global error message or an undefined.\n */\nexport function getGlobalErrorMessage(apiError: IApiError | undefined, validFields: string[] = []): string | undefined {\n    if (!apiError) {\n        return;\n    }\n    for (const field of validFields) {\n        if (getFieldErrors(apiError, field)) {\n            return;\n        }\n    }\n\n    const serverError = apiError.response && apiError.response.data;\n    if (serverError && serverError.message) {\n        return serverError.message;\n    }\n\n    return t(\"Something went wrong while contacting the server.\");\n}\n","/**\n * A module to isolate meta data passed from the server into a single dependency.\n * This should always be used instead of accessing window.gdn directly.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\ninterface IGdn {\n    meta: AnyObject;\n    permissions: AnyObject;\n    translations: AnyObject;\n    [key: string]: any;\n}\n\n/** The gdn object may be set in an inline script in the head of the document. */\nconst gdn = window.gdn || {};\n\nif (!(\"meta\" in gdn)) {\n    gdn.meta = {};\n}\n\nif (!(\"permissions\" in gdn)) {\n    gdn.permissions = {};\n}\n\nif (!(\"translations\" in gdn)) {\n    gdn.translations = {};\n}\n\nexport default gdn as IGdn;\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport ReduxActions, { bindThunkAction } from \"@library/redux/ReduxActions\";\nimport actionCreatorFactory from \"typescript-fsa\";\nimport { ITheme } from \"@library/theming/themeReducer\";\nimport { IApiError } from \"@library/@types/api/core\";\n\nconst createAction = actionCreatorFactory(\"@@themes\");\n\nexport default class ThemeActions extends ReduxActions {\n    public static getAssets = createAction.async<{ themeKey: string }, ITheme, IApiError>(\"GET\");\n    public getAssets = (themeKey: string) => {\n        const { theme } = this.getState();\n        if (theme.assets.data) {\n            return theme.assets.data;\n        }\n\n        const apiThunk = bindThunkAction(ThemeActions.getAssets, async () => {\n            const response = await this.api.get(`/themes/${themeKey}`);\n            return response.data;\n        })({ themeKey });\n        return this.dispatch(apiThunk);\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { ILocale } from \"@vanilla/i18n\";\nimport { actionCreatorFactory } from \"typescript-fsa\";\nimport { IApiError, LoadStatus } from \"@library/@types/api/core\";\nimport { bindThunkAction } from \"@library/redux/ReduxActions\";\nimport apiv2 from \"@library/apiv2\";\nimport getStore from \"@library/redux/getStore\";\n\nconst createAction = actionCreatorFactory(\"@@locales\");\nexport const getAllLocalesACs = createAction.async<{}, ILocale[], IApiError>(\"GET_ALL\");\n\n/**\n * Thunk for fetching locales.\n */\nexport function fetchLocalesFromApi(force?: boolean): Promise<ILocale[]> {\n    const { dispatch, getState } = getStore();\n\n    const localeLoadable = getState().locales.locales;\n    if (!force && localeLoadable.status === LoadStatus.SUCCESS) {\n        return Promise.resolve(localeLoadable.data!);\n    }\n\n    const apiThunk = bindThunkAction(getAllLocalesACs, async () => {\n        const response = await apiv2.get(`/locales`);\n        return response.data;\n    })();\n    return apiThunk(dispatch, getState, {});\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport ThemeActions from \"@library/theming/ThemeActions\";\nimport { ILoadable, LoadStatus } from \"@library/@types/api/core\";\nimport produce from \"immer\";\n\nexport interface ITheme {\n    assets: IThemeAssets;\n}\n\nexport interface IThemeAssets {\n    fonts?: IThemeFont[];\n    logo?: IThemeExternalAsset;\n    mobileLogo?: IThemeExternalAsset;\n    variables?: IThemeVariables;\n}\n\nexport interface IThemeFont {\n    name: string;\n    url: string;\n    fallbacks: string[];\n}\n\nexport interface IThemeExternalAsset {\n    type: string;\n    url: string;\n}\n\nexport interface IThemeVariables {\n    [key: string]: string;\n}\n\nexport interface IThemeState {\n    assets: ILoadable<IThemeAssets>;\n}\n\nexport const INITIAL_STATE: IThemeState = {\n    assets: {\n        status: LoadStatus.PENDING,\n    },\n};\n\nexport const themeReducer = produce(\n    reducerWithInitialState(INITIAL_STATE)\n        .case(ThemeActions.getAssets.started, state => {\n            state.assets.status = LoadStatus.LOADING;\n            return state;\n        })\n        .case(ThemeActions.getAssets.done, (state, payload) => {\n            state.assets.status = LoadStatus.SUCCESS;\n            state.assets.data = payload.result.assets;\n            return state;\n        })\n        .case(ThemeActions.getAssets.failed, (state, payload) => {\n            if (payload.error.response && payload.error.response.status === 404) {\n                // This theme just doesn't have variables. Use the defaults.\n                state.assets.data = {};\n                state.assets.status = LoadStatus.SUCCESS;\n                return state;\n            } else {\n                state.assets.status = LoadStatus.ERROR;\n                state.assets.error = payload.error;\n                return state;\n            }\n        }),\n);\n","/**\n * @author Adam (charrondev) Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { IUserSuggestion } from \"@library/features/users/suggestion/IUserSuggestion\";\nimport { ILoadable } from \"@library/@types/api/core\";\n\nexport type ISuggestionValue = ILoadable<IUserSuggestion[]>;\n\nexport interface ISuggestionNode {\n    children?: {\n        [key: string]: ISuggestionNode;\n    };\n    value?: ISuggestionValue;\n}\n\n/**\n * A trie for storage of mention data.\n */\nexport default class SuggestionTrie {\n    public MAX_PARTIAL_LOOKUP_ITERATIONS = 10;\n    private root: ISuggestionNode = {};\n\n    /**\n     * Insert a value into a node for the word. This will overwrite whatever value the node already has\n     *\n     * @param word - The location in the trie.\n     * @param value - The value for the node.\n     */\n    public insert(word: string, value: ISuggestionValue): void {\n        let current = this.root;\n\n        for (let i = 0; i < word.length; i++) {\n            const letter = word[i];\n            if (!current.children) {\n                current.children = {};\n            }\n\n            if (!(letter in current.children)) {\n                const contents: ISuggestionNode = i !== word.length - 1 ? {} : { children: {} };\n                current.children[letter] = contents;\n            }\n\n            current = current.children[letter];\n        }\n\n        current.value = value;\n    }\n\n    /**\n     * Get a node for a given word.\n     *\n     * If no word is passed the root node will be returned.\n     *\n     * @param word - The word to lookup.\n     */\n    public getNode(word?: string): ISuggestionNode | null {\n        let node = this.root;\n        if (word === undefined) {\n            return node;\n        }\n\n        for (let i = 0; i < word.length; i++) {\n            const char = word.charAt(i);\n            if (node.children && node.children[char]) {\n                node = node.children[char];\n            } else {\n                return null;\n            }\n        }\n        return node;\n    }\n\n    /**\n     * Get the value out of a particular node.\n     *\n     * @param word - The word to lookup.\n     */\n    public getValue(word: string): ISuggestionValue | null {\n        const node = this.getNode(word);\n        return (node && node.value) || null;\n    }\n\n    /**\n     * Lookup the value for a word using increasingly small substrings of the current string.\n     *\n     * Number of iterations is capped at MAX_PARTIAL_LOOKUP_ITERATIONS.\n     *\n     * ex. this.getValueFormPartials(\"test\") will lookup for\n     * - \"test\",\n     * - \"tes\",\n     * - \"te\",\n     * - \"t\"\n     *\n     * And return immediately if it finds a result.\n     */\n    public getValueFromPartialsOfWord(word: string): ISuggestionValue | null {\n        const startingLength = Math.min(this.MAX_PARTIAL_LOOKUP_ITERATIONS, word.length);\n        for (let x = startingLength; x > 0; x--) {\n            const substring = word.substring(0, x);\n            const potentialValue = this.getValue(substring);\n            if (potentialValue != null) {\n                return potentialValue;\n            }\n        }\n\n        return null;\n    }\n}\n","/**\n * @author Adam (charrondev) Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { logError } from \"@vanilla/utils\";\nimport { LoadStatus } from \"@library/@types/api/core\";\nimport { IUsersStoreState } from \"@library/features/users/userModel\";\nimport ReduxActions, { ActionsUnion } from \"@library/redux/ReduxActions\";\nimport { IUserSuggestion } from \"@library/features/users/suggestion/IUserSuggestion\";\nimport UserSuggestionModel from \"@library/features/users/suggestion/UserSuggestionModel\";\nimport { Dispatch } from \"redux\";\nimport apiv2 from \"@library/apiv2\";\nimport debounce from \"lodash/debounce\";\n\ninterface ILookupUserOptions {\n    username: string;\n}\n\nexport default class UserSuggestionActions extends ReduxActions {\n    public static readonly SET_ACTIVE_SUGGESTION = \"@@mentions/SET_ACTIVE_SUGGESTION\";\n    public static readonly LOAD_USERS_REQUEST = \"@@mentions/GET_USERS_REQUEST\";\n    public static readonly LOAD_USERS_RESPONSE = \"@@mentions/LOAD_USERS_RESPONSE\";\n    public static readonly LOAD_USERS_ERROR = \"@@mentions/LOAD_USERS_ERROR\";\n\n    public static readonly ACTION_TYPES:\n        | ActionsUnion<typeof UserSuggestionActions.loadUsersACs>\n        | ReturnType<typeof UserSuggestionActions.setActiveAC>;\n\n    // The number of characters that we will lookup to try and invalidate a lookup early.\n    private static USER_LIMIT = 50;\n\n    // Action creators\n    public static loadUsersACs = ReduxActions.generateApiActionCreators(\n        UserSuggestionActions.LOAD_USERS_REQUEST,\n        UserSuggestionActions.LOAD_USERS_RESPONSE,\n        UserSuggestionActions.LOAD_USERS_ERROR,\n        {} as IUserSuggestion[],\n        {} as ILookupUserOptions,\n    );\n\n    public static setActiveAC(suggestionID: string, suggestionIndex: number) {\n        return ReduxActions.createAction(UserSuggestionActions.SET_ACTIVE_SUGGESTION, {\n            suggestionID,\n            suggestionIndex,\n        });\n    }\n\n    /**\n     * Filter users down to a list that loosely matches the current searchName\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n     */\n    public static filterSuggestions(users: IUserSuggestion[], searchName: string) {\n        const searchCollator = Intl.Collator(\"en\", {\n            usage: \"search\",\n            sensitivity: \"base\",\n            ignorePunctuation: true,\n            numeric: true,\n        });\n\n        return users.filter((userSuggestion: IUserSuggestion) => {\n            if (userSuggestion.name.length < searchName.length) {\n                return false;\n            }\n\n            const suggestionIDPartial = userSuggestion.name.substring(0, searchName.length);\n            return searchCollator.compare(suggestionIDPartial, searchName) === 0;\n        });\n    }\n\n    public setActive = this.bindDispatch(UserSuggestionActions.setActiveAC);\n\n    /**\n     * Make an API request for mention suggestions. These results are cached by the lookup username.\n     */\n    private interalLoadUsers = (username: string) => {\n        return this.dispatch((dispatch: Dispatch<any>, getState: () => IUsersStoreState) => {\n            const trie = UserSuggestionModel.selectSuggestionsTrie(getState());\n            // Attempt an exact lookup first.\n            const exactLookup = trie.getValue(username);\n            if (exactLookup != null) {\n                switch (exactLookup.status) {\n                    case LoadStatus.SUCCESS:\n                        if (exactLookup.data) {\n                            return dispatch(\n                                UserSuggestionActions.loadUsersACs.response(\n                                    { data: exactLookup.data, status: 200 },\n                                    { username },\n                                ),\n                            );\n                        }\n                        break;\n                    case LoadStatus.LOADING:\n                        // Already handled\n                        return;\n                    case LoadStatus.ERROR:\n                        // Previously failed.\n                        if (exactLookup.error) {\n                            return dispatch(UserSuggestionActions.loadUsersACs.error(exactLookup.error, { username }));\n                        }\n                }\n            }\n\n            // Attempt a partial lookup to try and see if we can get results without an API request\n            const partialLookup = trie.getValueFromPartialsOfWord(username);\n            if (partialLookup != null) {\n                switch (partialLookup.status) {\n                    case LoadStatus.SUCCESS: {\n                        if (partialLookup.data && partialLookup.data.length < UserSuggestionActions.USER_LIMIT) {\n                            // The previous match already found the maximum amount of users that the server had\n                            // Return the previous results.\n                            return dispatch(\n                                UserSuggestionActions.loadUsersACs.response(\n                                    {\n                                        data: UserSuggestionActions.filterSuggestions(partialLookup.data, username),\n                                        status: 200,\n                                    },\n                                    { username },\n                                ),\n                            );\n                        }\n                        break;\n                    }\n                    case LoadStatus.ERROR:\n                        break;\n                    // Previously failed. We still want to proceed to a real lookup so do nothing.\n                    case LoadStatus.PENDING:\n                        break;\n                    // We still want to proceed to a real lookup so do nothing.\n                }\n            }\n\n            // Start the lookup.\n            dispatch(UserSuggestionActions.loadUsersACs.request({ username }));\n\n            const params = {\n                name: username + \"*\",\n                order: \"mention\",\n                limit: UserSuggestionActions.USER_LIMIT,\n            };\n            return apiv2\n                .get(\"/users/by-names/\", { params /*, cancelToken: this.apiCancelSource.token*/ })\n                .then(response => {\n                    if (response.status >= 500) {\n                        throw new Error(response.data);\n                    }\n\n                    // Add unique domIDs to each user.\n                    response.data = response.data.map(data => {\n                        data.domID = \"mentionSuggestion\" + data.userID;\n                        return data;\n                    });\n\n                    // Result is good. Lets GO!\n                    dispatch(UserSuggestionActions.loadUsersACs.response(response, { username }));\n                })\n                .catch(error => {\n                    logError(error);\n                    dispatch(UserSuggestionActions.loadUsersACs.error(error, { username }));\n                });\n        });\n    };\n\n    public loadUsers = debounce(this.interalLoadUsers, 50);\n}\n","/**\n * @author Adam (charrondev) Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { ILoadable, LoadStatus } from \"@library/@types/api/core\";\nimport { IUsersStoreState } from \"@library/features/users/userModel\";\nimport SuggestionTrie from \"@library/features/users/suggestion/SuggestionTrie\";\nimport { IUserSuggestion } from \"@library/features/users/suggestion/IUserSuggestion\";\nimport UserSuggestionActions from \"@library/features/users/suggestion/UserSuggestionActions\";\nimport ReduxReducer from \"@library/redux/ReduxReducer\";\nimport moment from \"moment\";\nimport { IUserFragment } from \"@library/@types/api/users\";\n\nexport interface IUserSuggestionState {\n    lastSuccessfulUsername: string | null;\n    currentUsername: string | null;\n    trie: SuggestionTrie;\n    activeSuggestionID: string;\n    activeSuggestionIndex: number;\n}\n\nexport interface IInjectableSuggestionsProps {\n    lastSuccessfulUsername: string | null;\n    currentUsername: string | null;\n    activeSuggestionID: string;\n    activeSuggestionIndex: number;\n    suggestions: ILoadable<IUserSuggestion[]>;\n    isLoading: boolean;\n}\n\nexport default class UserSuggestionModel implements ReduxReducer<IUserSuggestionState> {\n    private static readonly defaultSuggestions: ILoadable<IUserSuggestion[]> = {\n        status: LoadStatus.PENDING,\n    };\n\n    public static mapStateToProps(state: IUsersStoreState): IInjectableSuggestionsProps {\n        const stateSlice = { ...UserSuggestionModel.stateSlice(state) };\n        const { trie, ...rest } = stateSlice;\n        const suggestions = stateSlice.lastSuccessfulUsername\n            ? trie.getValue(stateSlice.lastSuccessfulUsername) || UserSuggestionModel.defaultSuggestions\n            : UserSuggestionModel.defaultSuggestions;\n\n        const currentNode = stateSlice.currentUsername && trie.getValue(stateSlice.currentUsername);\n        const isLoading = !!currentNode && currentNode.status === LoadStatus.LOADING;\n\n        return {\n            ...rest,\n            suggestions,\n            isLoading,\n        };\n    }\n\n    public static selectSuggestionsTrie(state: IUsersStoreState): SuggestionTrie {\n        return UserSuggestionModel.stateSlice(state).trie;\n    }\n\n    private static stateSlice(state: IUsersStoreState): IUserSuggestionState {\n        if (!state.users || !state.users.suggestions) {\n            throw new Error(\n                `Could not find users.suggestions in state ${state}. Be sure to initialize the usersReducer()`,\n            );\n        }\n\n        return state.users.suggestions;\n    }\n\n    /**\n     * Sort a list of user suggestions.\n     *\n     * Priorities\n     * [Exact Match]\n     * [Users active in the last 90 days, sorted loosely with transliteration]\n     * [Users not active in the last 90 days, sorted loosely with transliteration]\n     *\n     * @param users The users to sort.\n     * @param searchName The current search text.\n     * @param currentMoment The current time.\n     */\n    public static sortSuggestions(users: IUserSuggestion[], searchName: string, currentMoment = moment()) {\n        const looseCollator = Intl.Collator(\"en\", {\n            usage: \"sort\",\n            sensitivity: \"variant\",\n            ignorePunctuation: true,\n            numeric: true,\n        });\n\n        // Days of recent activity to look at.\n        const ACTIVE_THRESHOLD = 90;\n\n        // Fan out into most recently active users & less active users.\n        let recentlyActive: IUserSuggestion[] = [];\n        let lessActive: IUserSuggestion[] = [];\n\n        const daysAgo90 = currentMoment.subtract(ACTIVE_THRESHOLD, \"days\");\n\n        for (const user of users) {\n            if (!user.dateLastActive) {\n                lessActive.push(user);\n                continue;\n            }\n\n            const lastActiveMoment = moment(user.dateLastActive);\n            if (lastActiveMoment.isSameOrAfter(daysAgo90)) {\n                recentlyActive.push(user);\n            } else {\n                lessActive.push(user);\n            }\n        }\n\n        const sortByName = (userA: IUserSuggestion, userB: IUserSuggestion) => {\n            const casedSearchName = searchName.toLocaleLowerCase();\n            const aCasedName = userA.name.toLocaleLowerCase();\n            const bCasedName = userB.name.toLocaleLowerCase();\n\n            // Return partial matches first.\n            if (aCasedName.startsWith(casedSearchName) && !bCasedName.startsWith(casedSearchName)) {\n                return -1;\n            }\n            if (bCasedName.startsWith(casedSearchName) && !aCasedName.startsWith(casedSearchName)) {\n                return 1;\n            }\n            return looseCollator.compare(userA.name.toLocaleLowerCase(), userB.name.toLocaleLowerCase());\n        };\n\n        const exactToTheTop = (userA: IUserSuggestion, userB: IUserSuggestion) => {\n            const casedSearchName = searchName.toLocaleLowerCase();\n            const aCasedName = userA.name.toLocaleLowerCase();\n\n            //  Return exact matches first.\n            if (aCasedName === casedSearchName) {\n                return -1;\n            }\n\n            // Don't affect the sorts otherwise.\n            return 0;\n        };\n\n        // Sort each set of users separately.\n        recentlyActive.sort(sortByName);\n        lessActive.sort(sortByName);\n\n        // Join them back together.\n        const allUsers = [...recentlyActive, ...lessActive];\n\n        // Sort exact matches to the top.\n        allUsers.sort(exactToTheTop);\n        return allUsers;\n    }\n\n    public readonly initialState: IUserSuggestionState = {\n        lastSuccessfulUsername: null,\n        currentUsername: null,\n        trie: new SuggestionTrie(),\n        activeSuggestionID: \"\",\n        activeSuggestionIndex: 0,\n    };\n\n    public reducer = (\n        state = this.initialState,\n        action: typeof UserSuggestionActions.ACTION_TYPES,\n    ): IUserSuggestionState => {\n        switch (action.type) {\n            case UserSuggestionActions.LOAD_USERS_REQUEST: {\n                const { username } = action.meta;\n                state.trie.insert(username, {\n                    status: LoadStatus.LOADING,\n                });\n\n                // We want to invalidate the previous results unless:\n                // - The new string is longer than the old one\n                // - The new string is a superset of the old one.\n                let shouldKeepPreviousResults = false;\n                const previousSuccessfulName = state.lastSuccessfulUsername;\n                if (previousSuccessfulName != null && username.length >= previousSuccessfulName.length) {\n                    const newNameSubstring = username.substring(0, previousSuccessfulName.length);\n                    if (newNameSubstring === previousSuccessfulName) {\n                        shouldKeepPreviousResults = true;\n                    }\n                }\n\n                return {\n                    ...state,\n                    currentUsername: username,\n                    lastSuccessfulUsername: shouldKeepPreviousResults ? state.lastSuccessfulUsername : null,\n                };\n            }\n            case UserSuggestionActions.LOAD_USERS_ERROR: {\n                const error = action.payload;\n                const { username } = action.meta;\n                state.trie.insert(username, {\n                    status: LoadStatus.ERROR,\n                    data: undefined,\n                    error,\n                });\n                return state;\n            }\n            case UserSuggestionActions.LOAD_USERS_RESPONSE: {\n                const users = action.payload.data;\n                const { username } = action.meta;\n                state.trie.insert(username, {\n                    status: LoadStatus.SUCCESS,\n                    data: UserSuggestionModel.sortSuggestions(users, username),\n                });\n\n                const firstUserID = users.length > 0 ? users[0].domID : \"\";\n                return {\n                    ...state,\n                    activeSuggestionID: firstUserID,\n                    activeSuggestionIndex: 0,\n                    lastSuccessfulUsername: username,\n                    currentUsername: username,\n                };\n            }\n            case UserSuggestionActions.SET_ACTIVE_SUGGESTION: {\n                const { suggestionID, suggestionIndex } = action.payload;\n                return {\n                    ...state,\n                    activeSuggestionID: suggestionID,\n                    activeSuggestionIndex: suggestionIndex,\n                };\n            }\n            default:\n                return state;\n        }\n    };\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { IApiError, LoadStatus } from \"@library/@types/api/core\";\nimport { IMe, IMeCounts } from \"@library/@types/api/users\";\nimport ReduxActions, { bindThunkAction } from \"@library/redux/ReduxActions\";\nimport { actionCreatorFactory } from \"typescript-fsa\";\n\nconst createAction = actionCreatorFactory(\"@@users\");\n\n// The duration we wait to check for new counts.\nconst COUNT_CACHE_PERIOD = 60; // 60 Seconds\n\n/**\n * Redux actions for the users data.\n */\nexport default class UserActions extends ReduxActions {\n    public static getMeACs = createAction.async<{}, IMe, IApiError>(\"GET_ME\");\n    /**\n     * Request the currently signed in user data if it's not loaded.\n     */\n    public getMe = () => {\n        const currentUser = this.getState().users.current;\n        if (currentUser.status === LoadStatus.LOADING) {\n            // Don't request the user more than once.\n            return;\n        }\n        const apiThunk = bindThunkAction(UserActions.getMeACs, async () => {\n            const response = await this.api.get(\"/users/me\");\n            return response.data;\n        })();\n\n        return this.dispatch(apiThunk);\n    };\n\n    public static getCountsACs = createAction.async<{}, { counts: IMeCounts }, IApiError>(\"GET_ME_COUNTS\");\n\n    /**\n     * Check if we have valid count data and request it again if it is stale.\n     */\n    public checkCountData = () => {\n        const currentTime = new Date().getTime();\n        const { lastRequested } = this.getState().users.countInformation;\n\n        if (lastRequested !== null && currentTime < lastRequested + COUNT_CACHE_PERIOD) {\n            // Bailout if we've requested this data within the previous cache period\n            return;\n        }\n        const apiThunk = bindThunkAction(UserActions.getCountsACs, async () => {\n            const response = await this.api.get(\"/users/me-counts\");\n            return response.data;\n        })();\n\n        return this.dispatch(apiThunk);\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport ReduxActions, { ActionsUnion } from \"@library/redux/ReduxActions\";\nimport { INotification, INotificationWritable } from \"@library/@types/api/notifications\";\n\n/**\n * Redux actions for the current user's notification data.\n */\nexport default class NotificationsActions extends ReduxActions {\n    public static readonly GET_NOTIFICATION_REQUEST = \"@@notifications/GET_NOTIFICATION_REQUEST\";\n    public static readonly GET_NOTIFICATION_RESPONSE = \"@@notifications/GET_NOTIFICATION_RESPONSE\";\n    public static readonly GET_NOTIFICATION_ERROR = \"@@notifications/GET_NOTIFICATION_ERROR\";\n\n    /**\n     * Action creators for getting a single notification.\n     */\n    public static getNotificationACs = ReduxActions.generateApiActionCreators(\n        NotificationsActions.GET_NOTIFICATION_REQUEST,\n        NotificationsActions.GET_NOTIFICATION_RESPONSE,\n        NotificationsActions.GET_NOTIFICATION_ERROR,\n        {} as INotification,\n        {},\n    );\n\n    public static readonly GET_NOTIFICATIONS_REQUEST = \"@@notifications/GET_NOTIFICATIONS_REQUEST\";\n    public static readonly GET_NOTIFICATIONS_RESPONSE = \"@@notifications/GET_NOTIFICATIONS_RESPONSE\";\n    public static readonly GET_NOTIFICATIONS_ERROR = \"@@notifications/GET_NOTIFICATIONS_ERROR\";\n\n    /**\n     * Action creators for getting a paginated list of the current user's notifications.\n     */\n    public static getNotificationsACs = ReduxActions.generateApiActionCreators(\n        NotificationsActions.GET_NOTIFICATIONS_REQUEST,\n        NotificationsActions.GET_NOTIFICATIONS_RESPONSE,\n        NotificationsActions.GET_NOTIFICATIONS_ERROR,\n        {} as INotification[],\n        {},\n    );\n\n    public static readonly MARK_READ_REQUEST = \"@@notifications/MARK_READ_REQUEST\";\n    public static readonly MARK_READ_RESPONSE = \"@@notifications/MARK_READ_RESPONSE\";\n    public static readonly MARK_READ_ERROR = \"@@notifications/MARK_READ_ERROR\";\n\n    /**\n     * Action creators for marking a single notification as read.\n     */\n    public static markReadACs = ReduxActions.generateApiActionCreators(\n        NotificationsActions.MARK_READ_REQUEST,\n        NotificationsActions.MARK_READ_RESPONSE,\n        NotificationsActions.MARK_READ_ERROR,\n        {} as INotification,\n        {} as INotificationWritable,\n    );\n\n    public static readonly MARK_ALL_READ_REQUEST = \"@@notifications/MARK_ALL_READ_REQUEST\";\n    public static readonly MARK_ALL_READ_RESPONSE = \"@@notifications/MARK_ALL_READ_RESPONSE\";\n    public static readonly MARK_ALL_READ_ERROR = \"@@notifications/MARK_ALL_READ_ERROR\";\n\n    /**\n     * Action creators for marking all of the current user's notifications as read.\n     */\n    public static markAllReadACs = ReduxActions.generateApiActionCreators(\n        NotificationsActions.MARK_ALL_READ_REQUEST,\n        NotificationsActions.MARK_ALL_READ_RESPONSE,\n        NotificationsActions.MARK_ALL_READ_ERROR,\n        {},\n        {} as INotificationWritable,\n    );\n\n    /**\n     * Union of all possible action types in this class.\n     */\n    public static readonly ACTION_TYPES:\n        | ActionsUnion<typeof NotificationsActions.getNotificationACs>\n        | ActionsUnion<typeof NotificationsActions.getNotificationsACs>\n        | ActionsUnion<typeof NotificationsActions.markReadACs>\n        | ActionsUnion<typeof NotificationsActions.markAllReadACs>;\n\n    /**\n     * Get a single notification.\n     *\n     * @param id Unique ID of the notification.\n     */\n    public getNotification = (id: number) => {\n        return this.dispatchApi(\"get\", `/notifications/${id}`, NotificationsActions.getNotificationACs, {});\n    };\n\n    /**\n     * Get a paginated list of notifications for the current user.\n     */\n    public getNotifications = () => {\n        return this.dispatchApi(\"get\", \"/notifications\", NotificationsActions.getNotificationsACs, {});\n    };\n\n    /**\n     * Mark a single notification as read.\n     *\n     * @param id Unique ID of the notification.\n     */\n    public markRead = (id: number) => {\n        return this.dispatchApi(\"patch\", `/notifications/${id}`, NotificationsActions.markReadACs, {\n            read: true,\n        });\n    };\n\n    /**\n     * Mark all notifications for the current user as read.\n     */\n    public markAllRead = () => {\n        return this.dispatchApi(\"patch\", \"/notifications\", NotificationsActions.markAllReadACs, {\n            read: true,\n        });\n    };\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\nimport { ILoadable, LoadStatus } from \"@library/@types/api/core\";\nimport { IMe, IMeCounts, IUser, IUserFragment } from \"@library/@types/api/users\";\nimport UserSuggestionModel, { IUserSuggestionState } from \"@library/features/users/suggestion/UserSuggestionModel\";\nimport UserActions from \"@library/features/users/UserActions\";\nimport produce from \"immer\";\nimport { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { ICoreStoreState } from \"@library/redux/reducerRegistry\";\nimport NotificationsActions from \"@library/features/notifications/NotificationsActions\";\n\nexport interface IInjectableUserState {\n    currentUser: ILoadable<IMe>;\n}\n\ninterface IUsersState {\n    current: ILoadable<IMe>;\n    countInformation: {\n        counts: IMeCounts;\n        lastRequested: number | null; // A timestamp of the last time we received this count data.\n    };\n    suggestions: IUserSuggestionState;\n}\n\nexport interface IUsersStoreState {\n    users: IUsersState;\n}\n\nconst suggestionReducer = new UserSuggestionModel().reducer;\n\nconst INITIAL_STATE: IUsersState = {\n    current: {\n        status: LoadStatus.PENDING,\n    },\n    countInformation: {\n        counts: [],\n        lastRequested: null,\n    },\n    suggestions: suggestionReducer(undefined, \"\" as any),\n};\n\nexport const GUEST_USER_ID = 0;\n\n/**\n * Determine if a user fragment is a guest.\n */\nexport function isUserGuest(user: IUserFragment | null | undefined) {\n    return user && user.userID === GUEST_USER_ID;\n}\n/**\n * Reducer for user related data.\n */\nexport const usersReducer = produce(\n    reducerWithInitialState(INITIAL_STATE)\n        .case(UserActions.getMeACs.started, state => {\n            state.current.status = LoadStatus.LOADING;\n            return state;\n        })\n        .case(UserActions.getMeACs.done, (state, payload) => {\n            state.current.data = payload.result;\n            state.current.status = LoadStatus.SUCCESS;\n            return state;\n        })\n        .case(UserActions.getMeACs.failed, (state, payload) => {\n            state.current.status = LoadStatus.ERROR;\n            state.current.error = payload.error;\n            return state;\n        })\n        .case(UserActions.getCountsACs.started, state => {\n            state.countInformation.lastRequested = new Date().getTime();\n            return state;\n        })\n        .case(UserActions.getCountsACs.done, (state, payload) => {\n            state.countInformation.counts = payload.result.counts;\n            return state;\n        })\n        .default((state, action) => {\n            if (action.type === NotificationsActions.MARK_ALL_READ_RESPONSE) {\n                if (state.current.data) {\n                    state.current.data.countUnreadNotifications = 0;\n                }\n            }\n            state.suggestions = suggestionReducer(state.suggestions, action as any);\n            return state;\n        }),\n);\n\nexport function mapUsersStoreState(state: ICoreStoreState): IInjectableUserState {\n    if (!state.users || !state.users.current) {\n        throw new Error(\n            `It seems you did not initialize the users model correctly. Could not find \"users.current\" in state: ${state}`,\n        );\n    }\n\n    return {\n        currentUser: state.users.current,\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { produce } from \"immer\";\nimport { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { ILocale } from \"@vanilla/i18n\";\nimport { ILoadable, LoadStatus } from \"@library/@types/api/core\";\nimport { getAllLocalesACs } from \"@library/locales/localeActions\";\n\nexport interface ILocaleState {\n    locales: ILoadable<ILocale[]>;\n}\n\nconst DEFAULT_LOCALE_STATE = {\n    locales: {\n        status: LoadStatus.PENDING,\n    },\n};\n\nexport const localeReducer = produce(\n    reducerWithInitialState<ILocaleState>(DEFAULT_LOCALE_STATE)\n        .case(getAllLocalesACs.started, (nextState, payload) => {\n            nextState.locales.status = LoadStatus.LOADING;\n            return nextState;\n        })\n        .case(getAllLocalesACs.done, (nextState, payload) => {\n            nextState.locales.status = LoadStatus.SUCCESS;\n            nextState.locales.data = payload.result;\n            return nextState;\n        })\n        .case(getAllLocalesACs.failed, (nextState, payload) => {\n            nextState.locales.status = LoadStatus.ERROR;\n            nextState.locales.error = payload.error;\n            return nextState;\n        }),\n);\n","/**\n * A reducer registry so that we can have dynamically loading reducers.\n *\n * @see http://nicolasgallagher.com/redux-modules-and-code-splitting/\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { IThemeState, themeReducer } from \"@library/theming/themeReducer\";\nimport { IUsersStoreState, usersReducer } from \"@library/features/users/userModel\";\nimport { Reducer, ReducersMapObject, combineReducers } from \"redux\";\nimport { ILocaleState, localeReducer } from \"@library/locales/localeReducer\";\nimport getStore from \"@library/redux/getStore\";\n\nconst dynamicReducers = {};\n\nexport function registerReducer(name: string, reducer: Reducer) {\n    dynamicReducers[name] = reducer;\n    getStore().replaceReducer(combineReducers(getReducers()));\n}\n\nexport interface ICoreStoreState extends IUsersStoreState {\n    theme: IThemeState;\n    locales: ILocaleState;\n}\n\nexport function getReducers(): ReducersMapObject<any, any> {\n    return {\n        // We have a few static reducers.\n        users: usersReducer,\n        theme: themeReducer,\n        locales: localeReducer,\n        ...dynamicReducers,\n    };\n}\n\n/**\n * @deprecated\n */\nconst reducerRegistry = {\n    register: registerReducer,\n    getReducers,\n};\n\nexport default reducerRegistry;\n","/**\n * Application functions for interop between Components in different packages.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport gdn from \"@library/gdn\";\nimport { PromiseOrNormalCallback } from \"@vanilla/utils\";\nimport isUrl from \"validator/lib/isURL\";\n\n// Re-exported for backwards compatibility\nexport { t, translate } from \"@vanilla/i18n\";\n\n/**\n * Get a piece of metadata passed from the server.\n *\n * @param key - The key to lookup.\n * @param defaultValue - A fallback value in case the key cannot be found.\n *\n * @returns Returns a meta value or the default value.\n */\nexport function getMeta(key: string, defaultValue?: any) {\n    if (!gdn.meta) {\n        return defaultValue;\n    }\n\n    const parts = key.split(\".\");\n    let haystack = gdn.meta;\n\n    for (const part of parts) {\n        if (!haystack.hasOwnProperty(part)) {\n            return defaultValue;\n        }\n        haystack = haystack[part];\n    }\n    return haystack;\n}\n\n/**\n * Set a piece of metadata. This will override what was passed from the server.\n *\n * @param key - The key to store under.\n * @param value - The value to set.\n */\nexport function setMeta(key: string, value: any) {\n    const parts = key.split(\".\");\n    const last = parts.pop();\n\n    if (!last) {\n        throw new Error(`Unable to set meta value ${key}. ${last} is not a valid object key.`);\n    }\n\n    let haystack = gdn.meta;\n\n    for (const part of parts) {\n        if (haystack[part] === null || typeof haystack[part] !== \"object\") {\n            haystack[part] = {};\n        }\n        haystack = haystack[part];\n    }\n    haystack[last] = value;\n}\n\n/**\n * Determine if a string is an allowed URL.\n *\n * In the future this may be extended to check if we want to whitelist/blacklist various URLs.\n *\n * @param input - The string to check.\n */\nexport function isAllowedUrl(input: string): boolean {\n    // Options https://github.com/chriso/validator.js#validators\n    const options = {\n        protocols: [\"http\", \"https\"],\n        require_tld: true,\n        require_protocol: true,\n        require_host: true,\n        require_valid_protocol: true,\n        allow_trailing_dot: false,\n        allow_protocol_relative_urls: false,\n    };\n    return isUrl(input, options);\n}\n\n/**\n * Format a URL in the format passed from the controller.\n *\n * @param path - The path to format.\n *\n * @returns Returns a URL that can be used in the APP.\n */\nexport function formatUrl(path: string, withDomain: boolean = false): string {\n    if (path.indexOf(\"//\") >= 0) {\n        return path;\n    } // this is an absolute path.\n\n    // The context paths that come down are expect to have no / at the end of them.\n    // Normally a domain like so: https://someforum.com\n    // When we don't have that we want to fallback to \"\" so that our path with a / can get passed.\n    const urlBase = withDomain\n        ? window.location.origin + getMeta(\"context.basePath\", \"\")\n        : getMeta(\"context.basePath\", \"\");\n    return urlBase + path;\n}\n\n/**\n * Generate a URL from the site's web root.\n *\n * No site section will be included.\n */\nexport function siteUrl(path: string): string {\n    if (path.indexOf(\"//\") >= 0) {\n        return path;\n    } // this is an absolute path.\n\n    // The context paths that come down are expect to have no / at the end of them.\n    // Normally a domain like so: https://someforum.com\n    // When we don't have that we want to fallback to \"\" so that our path with a / can get passed.\n    const urlBase = window.location.origin + getMeta(\"context.host\", \"\");\n    return urlBase + path;\n}\n\n/**\n * Extract relative URL part from absolute full URL.\n *\n * @param fullUrl - The absolute url to transform.\n *\n * @returns Returns a URL that can be used in the APP.\n */\nexport function getRelativeUrl(fullUrl: string): string {\n    const urlBase = window.location.origin + getMeta(\"context.basePath\", \"\");\n    return fullUrl.replace(urlBase, \"\");\n}\n\n/**\n * Create the URL of an asset of the site.\n *\n * @param path - The path to format.\n *\n * @returns Returns a URL that can be used for a static asset.\n */\nexport function assetUrl(path: string): string {\n    if (path.indexOf(\"//\") >= 0) {\n        return path;\n    } // this is an absolute path.\n\n    // The context paths that come down are expect to have no / at the end of them.\n    // Normally a domain like so: https://someforum.com\n    // When we don't have that we want to fallback to \"\" so that our path with a / can get passed.\n    const urlFormat = getMeta(\"context.assetPath\", \"\");\n    return urlFormat + path;\n}\n\n/**\n * Create the URL to the theme's asset folder\n *\n * @param path - The path to format.\n *\n * @returns Returns a URL that can be used for a static asset.\n */\nexport function themeAsset(path: string): string {\n    const themeKey = getMeta(\"ui.themeKey\");\n    return assetUrl(`/themes/${themeKey}/${path}`);\n}\n\n/**\n * @type {Array}\n * @private\n */\nconst _readyHandlers: PromiseOrNormalCallback[] = [];\n\n/**\n * Register a callback that executes when the document and the core libraries are ready to use.\n *\n * @param callback - The function to call. This can return a Promise but doesn't have to.\n */\nexport function onReady(callback: PromiseOrNormalCallback) {\n    _readyHandlers.push(callback);\n}\n\n/**\n * Execute all of the registered events in order.\n *\n * @returns A Promise when the events have all fired.\n */\nexport function _executeReady(): Promise<any[]> {\n    return new Promise(resolve => {\n        const handlerPromises = _readyHandlers.map(handler => handler());\n        const exec = () => {\n            return Promise.all(handlerPromises).then(resolve);\n        };\n\n        if (document.readyState !== \"loading\") {\n            return exec();\n        } else {\n            document.addEventListener(\"DOMContentLoaded\", exec);\n        }\n    });\n}\n\n/**\n * Execute a callback when a piece of DOM content is ready to be operated on.\n *\n * This is similar to onReady() but also includes content that is added dynamically (ex. AJAX).\n * Note that this function is meant to bridge the non-react parts of the application with react.\n *\n * @param callback - The callback to execute.\n */\nexport function onContent(callback: (event: CustomEvent) => void) {\n    document.addEventListener(\"X-DOMContentReady\", callback);\n}\n\n/**\n * Remove a listener registered with `onContent`.\n */\nexport function removeOnContent(callback: (event: CustomEvent) => void) {\n    document.removeEventListener(\"X-DOMContentReady\", callback);\n}\n\n/**\n * Make a URL to a user's profile.\n */\nexport function makeProfileUrl(username: string) {\n    const userPath = `/profile/${encodeURIComponent(username)}`;\n    return formatUrl(userPath, true);\n}\n"],"sourceRoot":""}